{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { writeBatch, doc, getDoc, setDoc, collection, getFirestore } from \"firebase/firestore\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\"\n};\ninitializeApp(config);\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\"\n});\nexport const auth = getAuth(); // store specific properties from firebase user object in firestore\n\nexport const db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userDocSnap = await getDoc(userDocRef);\n  console.log(userDocSnap);\n\n  if (userDocSnap.exists()) {\n    // log data to console\n    console.log(\"Document data:\", userDocSnap.data());\n  } else {\n    // create a new user document object\n    console.log(\"User doen't exist. Will create.\");\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Add a new document in collection \"users\"\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {}\n  }\n\n  return userDocRef;\n};\nexport const createCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const shopCollectionRef = collection(db, collectionKey); // const shopCollectionSnap = await getDocs(shopCollectionRef)\n  // shopCollectionSnap.forEach((doc) => {\n  //   console.log(doc.id, \" => \", doc.data());\n  // });\n  // Make a batch request\n\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(obj => {\n    console.log(obj.title); // let firestore generate random id for docRef\n\n    const newDocRef = doc(shopCollectionRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const transformCollectionsSnapshotToMap = collections => {\n  const collectionsArray = [];\n  collections.forEach(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    collectionsArray.push({\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    });\n  }); // convert collectionsArray structure to object with key:value pairs\n  // key is collection title, value is entire collection  \n\n  return collectionsArray.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};","map":{"version":3,"sources":["/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/firebase/firebase.utils.js"],"names":["initializeApp","writeBatch","doc","getDoc","setDoc","collection","getFirestore","getAuth","GoogleAuthProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","googleProvider","setCustomParameters","login_hint","prompt","auth","db","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","console","log","exists","data","displayName","email","createdAt","Date","error","createCollectionAndDocuments","collectionKey","objectsToAdd","shopCollectionRef","batch","forEach","obj","title","newDocRef","set","commit","transformCollectionsSnapshotToMap","collections","collectionsArray","items","push","id","routeName","encodeURI","toLowerCase","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  writeBatch,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  getFirestore,\n} from \"firebase/firestore\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\",\n};\n\ninitializeApp(config);\n\nexport const googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\n\n// store specific properties from firebase user object in firestore\nexport const db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userDocSnap = await getDoc(userDocRef);\n\n  console.log(userDocSnap);\n\n  if (userDocSnap.exists()) {\n    // log data to console\n    console.log(\"Document data:\", userDocSnap.data());\n  } else {\n    // create a new user document object\n    console.log(\"User doen't exist. Will create.\");\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Add a new document in collection \"users\"\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {}\n  }\n  return userDocRef;\n};\n\nexport const createCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const shopCollectionRef = collection(db, collectionKey);\n  // const shopCollectionSnap = await getDocs(shopCollectionRef)\n  // shopCollectionSnap.forEach((doc) => {\n  //   console.log(doc.id, \" => \", doc.data());\n  // });\n\n  // Make a batch request\n  const batch = writeBatch(db);\n  objectsToAdd.forEach((obj) => {\n    console.log(obj.title);\n    // let firestore generate random id for docRef\n    const newDocRef = doc(shopCollectionRef);\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const transformCollectionsSnapshotToMap = (collections) => {\n  const collectionsArray = []\n  collections.forEach(doc => {\n    const {title, items} = doc.data()\n    collectionsArray.push({\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    })\n  });\n\n  // convert collectionsArray structure to object with key:value pairs\n  // key is collection title, value is entire collection  \n  return collectionsArray.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection\n    return accumulator\n  }, {})\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe()\n      resolve(userAuth)\n    }, reject)\n  })\n}"]},"metadata":{},"sourceType":"module"}