{"ast":null,"code":"import { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { auth, createUserProfileDocument, googleProvider, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\nimport { UserActionTypes } from \"./user.types\";\n\nfunction* signInWithGoogle() {\n  const {\n    user\n  } = yield signInWithPopup(auth, googleProvider);\n  yield getSnapshotFromUserauth(user);\n}\n\nfunction* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n  const {\n    user\n  } = yield signInWithEmailAndPassword(auth, email, password);\n  yield getSnapshotFromUserauth(user);\n}\n\nfunction* getSnapshotFromUserauth(authUser) {\n  try {\n    const userRef = yield call(createUserProfileDocument, authUser);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFromUserauth(userAuth);\n  } catch (error) {\n    yield put(signInFailure);\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/redux/user/user.sagas.js"],"names":["signInWithEmailAndPassword","signInWithPopup","getDoc","all","call","put","takeLatest","auth","createUserProfileDocument","googleProvider","getCurrentUser","signInFailure","signInSuccess","UserActionTypes","signInWithGoogle","user","getSnapshotFromUserauth","signInWithEmail","payload","email","password","authUser","userRef","userSnapshot","id","data","error","isUserAuthenticated","userAuth","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,0BAAT,EAAqCC,eAArC,QAA4D,eAA5D;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SACEC,IADF,EAEEC,yBAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,+BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,eAAT,QAAgC,cAAhC;;AAEA,UAAUC,gBAAV,GAA6B;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMd,eAAe,CAACM,IAAD,EAAOE,cAAP,CAAtC;AACA,QAAMO,uBAAuB,CAACD,IAAD,CAA7B;AACD;;AAED,UAAUE,eAAV,OAA4D;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAkC;AAC1D,QAAM;AAAEL,IAAAA;AAAF,MAAW,MAAMf,0BAA0B,CAACO,IAAD,EAAOY,KAAP,EAAcC,QAAd,CAAjD;AACA,QAAMJ,uBAAuB,CAACD,IAAD,CAA7B;AACD;;AAED,UAAUC,uBAAV,CAAkCK,QAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMlB,IAAI,CAACI,yBAAD,EAA4Ba,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMrB,MAAM,CAACoB,OAAD,CAAjC;AACA,UAAMjB,GAAG,CAACO,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACM,aAAa,CAACe,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUC,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMlB,cAAc,EAArC;;AACA,QAAI,CAACkB,QAAL,EAAe;AACb;AACD;;AACD,UAAMZ,uBAAuB,CAACY,QAAD,CAA7B;AACD,GAND,CAME,OAAOF,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACM,aAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUkB,mBAAV,GAAgC;AACrC,QAAMvB,UAAU,CAACO,eAAe,CAACiB,oBAAjB,EAAuChB,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUiB,kBAAV,GAA+B;AACpC,QAAMzB,UAAU,CAACO,eAAe,CAACmB,mBAAjB,EAAsCf,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUgB,kBAAV,GAA+B;AACpC,QAAM3B,UAAU,CAACO,eAAe,CAACqB,kBAAjB,EAAqCP,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAACyB,mBAAD,CAAL,EAA4BzB,IAAI,CAAC2B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  auth,\n  createUserProfileDocument,\n  googleProvider,\n  getCurrentUser\n} from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\nimport { UserActionTypes } from \"./user.types\";\n\nfunction* signInWithGoogle() {\n  const { user } = yield signInWithPopup(auth, googleProvider);\n  yield getSnapshotFromUserauth(user);\n}\n\nfunction* signInWithEmail({ payload: { email, password } }) {\n  const { user } = yield signInWithEmailAndPassword(auth, email, password);\n  yield getSnapshotFromUserauth(user);\n}\n\nfunction* getSnapshotFromUserauth(authUser) {\n  try {\n    const userRef = yield call(createUserProfileDocument, authUser);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) {\n      return;\n    }\n    yield getSnapshotFromUserauth(userAuth);\n  } catch (error) {\n    yield put(signInFailure);\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}