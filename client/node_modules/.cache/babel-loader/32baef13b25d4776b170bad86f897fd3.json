{"ast":null,"code":"var _jsxFileName = \"/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/pages/shop/shoppage.component.jsx\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Outlet } from \"react-router-dom\";\nimport { db, transformCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopPage extends Component {\n  constructor() {\n    super(...arguments);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections,\n      updateLoadingState\n    } = this.props;\n    const collectionRef = collection(db, \"collections\"); // retrieve data onComponentMount or when collectionRef changes\n\n    this.unsubscribeFromSnapshot = onSnapshot(collectionRef, async collections => {\n      const collectionsMap = transformCollectionsSnapshotToMap(collections);\n      updateCollections(collectionsMap);\n      updateLoadingState(false);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap)),\n  updateLoadingState: loadingState => dispatch(updateIsLoading(loadingState))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/pages/shop/shoppage.component.jsx"],"names":["collection","onSnapshot","React","Component","connect","Outlet","db","transformCollectionsSnapshotToMap","updateCollections","ShopPage","unsubscribeFromSnapshot","componentDidMount","updateLoadingState","props","collectionRef","collections","collectionsMap","render","mapDispatchToProps","dispatch","loadingState","updateIsLoading"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SACEC,EADF,EAEEC,iCAFF,QAGO,+BAHP;AAIA,SAASC,iBAAT,QAAkC,+BAAlC;;;AAEA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BO,uBAD+B,GACL,IADK;AAAA;;AAG/BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEH,MAAAA,iBAAF;AAAqBI,MAAAA;AAArB,QAA4C,KAAKC,KAAvD;AACA,UAAMC,aAAa,GAAGd,UAAU,CAACM,EAAD,EAAK,aAAL,CAAhC,CAFkB,CAIlB;;AACA,SAAKI,uBAAL,GAA+BT,UAAU,CACvCa,aADuC,EAEvC,MAAOC,WAAP,IAAuB;AACrB,YAAMC,cAAc,GAAGT,iCAAiC,CAACQ,WAAD,CAAxD;AACAP,MAAAA,iBAAiB,CAACQ,cAAD,CAAjB;AACAJ,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KANsC,CAAzC;AAQD;;AACDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAvB8B;;AA0BjC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCX,EAAAA,iBAAiB,EAAGQ,cAAD,IACjBG,QAAQ,CAACX,iBAAiB,CAACQ,cAAD,CAAlB,CAF8B;AAGxCJ,EAAAA,kBAAkB,EAAGQ,YAAD,IAAkBD,QAAQ,CAACE,eAAe,CAACD,YAAD,CAAhB;AAHN,CAAf,CAA3B;;AAMA,eAAehB,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAP,CAAkCT,QAAlC,CAAf","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  db,\n  transformCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\n\nclass ShopPage extends Component {\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { updateCollections, updateLoadingState } = this.props;\n    const collectionRef = collection(db, \"collections\");\n\n    // retrieve data onComponentMount or when collectionRef changes\n    this.unsubscribeFromSnapshot = onSnapshot(\n      collectionRef,\n      async (collections) => {\n        const collectionsMap = transformCollectionsSnapshotToMap(collections);\n        updateCollections(collectionsMap);\n        updateLoadingState(false)\n      }\n    );\n  }\n  render() {\n    return (\n      <div className=\"shop-page\">\n        <Outlet />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionsMap) =>\n    dispatch(updateCollections(collectionsMap)),\n  updateLoadingState: (loadingState) => dispatch(updateIsLoading(loadingState))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}