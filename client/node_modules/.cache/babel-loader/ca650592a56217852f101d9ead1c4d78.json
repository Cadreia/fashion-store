{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { writeBatch, doc, getDoc, setDoc, collection, getDocs, getFirestore } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\"\n};\ninitializeApp(config);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider).then(result => {// This gives you a Google Access Token. You can use it to access the Google API.\n    // const credential = GoogleAuthProvider.credentialFromResult(result);\n    // const token = credential.accessToken;\n    // The signed-in user info.\n    // const user = result.user;\n    // ...\n  }).catch(error => {// Handle Errors here.\n    // const errorCode = error.code;\n    // const errorMessage = error.message;\n    // The email of the user's account used.\n    // const email = error.email;\n    // The AuthCredential type that was used.\n    // const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n}; // store specific properties from firebase user object in firestore\n\nexport const db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userDocSnap = await getDoc(userDocRef);\n  console.log(userDocSnap);\n\n  if (userDocSnap.exists()) {\n    // log data to console\n    console.log(\"Document data:\", userDocSnap.data());\n  } else {\n    // create a new user document object\n    console.log(\"User doen't exist. Will create.\");\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Add a new document in collection \"users\"\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {}\n  }\n\n  return userDocRef;\n};\nexport const createCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const shopCollectionRef = collection(db, collectionKey); // const shopCollectionSnap = await getDocs(shopCollectionRef)\n  // shopCollectionSnap.forEach((doc) => {\n  //   console.log(doc.id, \" => \", doc.data());\n  // });\n  // Make a batch request\n\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(obj => {\n    console.log(obj.title); // let firestore generate random id for docRef\n\n    const newDocRef = doc(shopCollectionRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const transformCollectionsSnapshotToMap = collections => {\n  const collectionsArray = [];\n  collections.map(doc => {\n    const {\n      title,\n      item\n    } = doc.data();\n    collectionsArray.push({\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      item\n    });\n  });\n  return collectionsArray;\n};","map":{"version":3,"sources":["/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/firebase/firebase.utils.js"],"names":["initializeApp","writeBatch","doc","getDoc","setDoc","collection","getDocs","getFirestore","getAuth","signInWithPopup","GoogleAuthProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","setCustomParameters","login_hint","prompt","auth","signInWithGoogle","then","result","catch","error","db","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","console","log","exists","data","displayName","email","createdAt","Date","createCollectionAndDocuments","collectionKey","objectsToAdd","shopCollectionRef","batch","forEach","obj","title","newDocRef","set","commit","transformCollectionsSnapshotToMap","collections","collectionsArray","map","item","push","id","routeName","encodeURI","toLowerCase"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { writeBatch, doc, getDoc, setDoc, collection, getDocs, getFirestore } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\",\n};\n\ninitializeApp(config);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // const credential = GoogleAuthProvider.credentialFromResult(result);\n      // const token = credential.accessToken;\n\n      // The signed-in user info.\n      // const user = result.user;\n      // ...\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      // const errorCode = error.code;\n      // const errorMessage = error.message;\n\n      // The email of the user's account used.\n      // const email = error.email;\n\n      // The AuthCredential type that was used.\n      // const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n};\n\n// store specific properties from firebase user object in firestore\nexport const db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  \n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userDocSnap = await getDoc(userDocRef);\n\n  console.log(userDocSnap);\n\n  if (userDocSnap.exists()) {\n    // log data to console\n    console.log(\"Document data:\", userDocSnap.data());\n  } else {\n    // create a new user document object\n    console.log(\"User doen't exist. Will create.\");\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Add a new document in collection \"users\"\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {}\n  }\n  return userDocRef;\n};\n\nexport const createCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const shopCollectionRef = collection(db, collectionKey)\n  // const shopCollectionSnap = await getDocs(shopCollectionRef)\n  // shopCollectionSnap.forEach((doc) => {\n  //   console.log(doc.id, \" => \", doc.data());\n  // });\n\n  // Make a batch request\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(obj => {\n    console.log(obj.title)\n    // let firestore generate random id for docRef\n    const newDocRef = doc(shopCollectionRef)\n    batch.set(newDocRef, obj)\n  })\n\n  return await batch.commit()\n}\n\nexport const transformCollectionsSnapshotToMap = (collections) => {\n  const collectionsArray = []\n  collections.map(doc => {\n    const {title, item} = doc.data()\n    collectionsArray.push({\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      item\n    }) \n  });\n  return collectionsArray\n}"]},"metadata":{},"sourceType":"module"}