{"ast":null,"code":"import _regeneratorRuntime from \"/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { initializeApp } from \"firebase/app\";\nimport { doc, getDoc, setDoc, getFirestore } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nvar config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\"\n};\ninitializeApp(config);\nvar provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\"\n});\nexport var auth = getAuth();\nexport var signInWithGoogle = function signInWithGoogle() {\n  signInWithPopup(auth, provider).then(function (result) {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    var credential = GoogleAuthProvider.credentialFromResult(result);\n    var token = credential.accessToken; // The signed-in user info.\n\n    var user = result.user; // ...\n  }).catch(function (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The AuthCredential type that was used.\n\n    var credential = GoogleAuthProvider.credentialFromError(error); // ...\n  });\n}; // store specific properties from firebase user object in firestore\n\nvar db = getFirestore();\nexport var createUserProfileDocument = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth, additionalData) {\n    var userDocRef, userDocSnap, displayName, email, createdAt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (userAuth) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            userDocRef = doc(db, \"users\", userAuth.uid);\n            _context.next = 5;\n            return getDoc(userDocRef);\n\n          case 5:\n            userDocSnap = _context.sent;\n            console.log(userDocSnap);\n\n            if (!userDocSnap.exists()) {\n              _context.next = 11;\n              break;\n            }\n\n            console.log(\"Document data:\", userDocSnap.data());\n            _context.next = 21;\n            break;\n\n          case 11:\n            console.log(\"User doen't exist. Will create.\");\n            displayName = userAuth.displayName, email = userAuth.email;\n            createdAt = new Date();\n            _context.prev = 14;\n            _context.next = 17;\n            return setDoc(userDocRef, _objectSpread({\n              displayName: displayName,\n              email: email,\n              createdAt: createdAt\n            }, additionalData));\n\n          case 17:\n            _context.next = 21;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](14);\n\n          case 21:\n            return _context.abrupt(\"return\", userDocRef);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[14, 19]]);\n  }));\n\n  return function createUserProfileDocument(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/audrey/Documents/REACT/PORTFOLIO/fashion-store/src/firebase/firebase.utils.js"],"names":["initializeApp","doc","getDoc","setDoc","getFirestore","getAuth","signInWithPopup","GoogleAuthProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","setCustomParameters","login_hint","prompt","auth","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","db","createUserProfileDocument","userAuth","additionalData","userDocRef","uid","userDocSnap","console","log","exists","data","displayName","createdAt","Date"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { doc, getDoc, setDoc, getFirestore } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAoIpJODD_sNFWjtRVFL4zf1ujf7NpIxjQ\",\n  authDomain: \"ladda-store.firebaseapp.com\",\n  projectId: \"ladda-store\",\n  storageBucket: \"ladda-store.appspot.com\",\n  messagingSenderId: \"980174304099\",\n  appId: \"1:980174304099:web:bc2fb18d33200c89e69956\",\n  measurementId: \"G-R3WSPNCT67\",\n};\n\ninitializeApp(config);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  login_hint: \"user@example.com\",\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      // ...\n    })\n    .catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n};\n\n// store specific properties from firebase user object in firestore\nconst db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  \n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userDocSnap = await getDoc(userDocRef);\n\n  console.log(userDocSnap);\n\n  if (userDocSnap.exists()) {\n    console.log(\"Document data:\", userDocSnap.data());\n  } else {\n    console.log(\"User doen't exist. Will create.\");\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Add a new document in collection \"users\"\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {}\n  }\n  return userDocRef;\n};\n"]},"metadata":{},"sourceType":"module"}